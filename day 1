{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Day1--5.28"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Turtle learning"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font face=\"Times new roman\" > \n",
    "Graphics base：turtle    \n",
    "Main usage：painting   \n",
    "Some tips:  \n",
    "\n",
    "- use dir(third base) can get all function in third base\n",
    "- use help(third base) can get the introduction to third base\n",
    "- use help(third base.function)can get the use of function\n",
    "\n",
    "For example:   \n",
    "\n",
    "- dir(turtle)\n",
    "- help(turtle)\n",
    "- help(turtle.back)\n",
    "         \n",
    "Practice project:one pig who name is peiqi\n",
    "</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Turtle Function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font face=\"Times new roman\" >\n",
    "\n",
    "1. pensize(1-10) : the pen size  \n",
    "\n",
    "2. hideturtle(): hide the pen  \n",
    "\n",
    "3. colormode(1 or 255) : select mode of color divide 1 or 255 in r,g,b the three basic color  \n",
    "\n",
    "4. color('type' or 'number-r,g,b') : which can use two style and can mix with two color  \n",
    "\n",
    "5. setup(width = ,height = ,startx = ,starty = ) : set canvas size and the pen where to start  \n",
    "\n",
    "6. speed(0-10) : from 1 to 10 begin very fast and 0 is the fastest  \n",
    "\n",
    "7. penup() | pu  | up : all represent no drawing when pen start to move  \n",
    "\n",
    "8. pendown() | pd  | down : all represent put the pen down in canvas  \n",
    "\n",
    "9. setpos(x,y) | setpostion | goto : get the pen to specific location x and y both are number  \n",
    "\n",
    "10. setheading(angle) | seth : to adjust the angle of pen  \n",
    "\n",
    "11. begin_fill() | end_fill : fill the color in painting  \n",
    "\n",
    "12. left(angle) | lf : left some angle while painting  \n",
    "\n",
    "13. forward(number) | fd : move pen forward some distance  \n",
    "\n",
    "14. circle(r,angle,step） :  to painting circle 'r' is radius 'angle' is circle length 'step' is calculate numbers  \n",
    "\n",
    "    </font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Turtle steps"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font face=\"Times new roman\" > \n",
    "first：set pensize | canvas size | speed | colormode before color  \n",
    "second: penup | pendown | setpostion  \n",
    "third: setheading | left | forward | circle | begin_fill | begin_end  \n",
    "four: mainloop\n",
    "</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Turtle practice"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import turtle as tu\n",
    "\n",
    "#first\n",
    "tu.pensize(4)\n",
    "tu.setup(800,600,400,200)\n",
    "tu.speed(5)\n",
    "tu.colormode(255)\n",
    "tu.color(205,65,160)\n",
    "\n",
    "#second\n",
    "tu.penup()\n",
    "tu.setpos(20,50)\n",
    "tu.pendown()\n",
    "tu.begin_fill()\n",
    "tu.goto(60,30)\n",
    "\n",
    "#third\n",
    "tu.setheading(90)\n",
    "tu.forward(100)\n",
    "tu.left(90)\n",
    "tu.forward(100)\n",
    "tu.end_fill()\n",
    "tu.circle(20,180,5)\n",
    "\n",
    "#four\n",
    "tu.mainloop()"
   ]
  },
  {
   "attachments": {
    "image.png": {
     "image/png": "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"
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![image.png](attachment:image.png)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
